// Generated from LogiX.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,49,346,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,
42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,5,44,321,8,44,10,44,
12,44,324,9,44,1,45,4,45,327,8,45,11,45,12,45,328,1,46,1,46,5,46,333,8,46,
10,46,12,46,336,9,46,1,47,3,47,339,8,47,1,47,1,47,1,48,1,48,1,48,1,48,0,
0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,1,0,
5,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,
3,0,9,10,13,13,32,32,349,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
1,99,1,0,0,0,3,102,1,0,0,0,5,106,1,0,0,0,7,108,1,0,0,0,9,110,1,0,0,0,11,
117,1,0,0,0,13,125,1,0,0,0,15,127,1,0,0,0,17,129,1,0,0,0,19,135,1,0,0,0,
21,137,1,0,0,0,23,139,1,0,0,0,25,141,1,0,0,0,27,146,1,0,0,0,29,153,1,0,0,
0,31,155,1,0,0,0,33,157,1,0,0,0,35,159,1,0,0,0,37,161,1,0,0,0,39,164,1,0,
0,0,41,172,1,0,0,0,43,175,1,0,0,0,45,182,1,0,0,0,47,185,1,0,0,0,49,191,1,
0,0,0,51,194,1,0,0,0,53,199,1,0,0,0,55,202,1,0,0,0,57,210,1,0,0,0,59,223,
1,0,0,0,61,226,1,0,0,0,63,239,1,0,0,0,65,242,1,0,0,0,67,253,1,0,0,0,69,256,
1,0,0,0,71,269,1,0,0,0,73,272,1,0,0,0,75,282,1,0,0,0,77,286,1,0,0,0,79,291,
1,0,0,0,81,297,1,0,0,0,83,303,1,0,0,0,85,307,1,0,0,0,87,315,1,0,0,0,89,318,
1,0,0,0,91,326,1,0,0,0,93,330,1,0,0,0,95,338,1,0,0,0,97,342,1,0,0,0,99,100,
5,116,0,0,100,101,5,111,0,0,101,2,1,0,0,0,102,103,5,101,0,0,103,104,5,110,
0,0,104,105,5,100,0,0,105,4,1,0,0,0,106,107,5,58,0,0,107,6,1,0,0,0,108,109,
5,44,0,0,109,8,1,0,0,0,110,111,5,108,0,0,111,112,5,111,0,0,112,113,5,115,
0,0,113,114,5,111,0,0,114,115,5,119,0,0,115,116,5,111,0,0,116,10,1,0,0,0,
117,118,5,112,0,0,118,119,5,111,0,0,119,120,5,119,0,0,120,121,5,116,0,0,
121,122,5,111,0,0,122,123,5,114,0,0,123,124,5,122,0,0,124,12,1,0,0,0,125,
126,5,91,0,0,126,14,1,0,0,0,127,128,5,93,0,0,128,16,1,0,0,0,129,130,5,106,
0,0,130,131,5,101,0,0,131,132,5,115,0,0,132,133,5,108,0,0,133,134,5,105,
0,0,134,18,1,0,0,0,135,136,5,60,0,0,136,20,1,0,0,0,137,138,5,62,0,0,138,
22,1,0,0,0,139,140,5,61,0,0,140,24,1,0,0,0,141,142,5,122,0,0,142,143,5,114,
0,0,143,144,5,111,0,0,144,145,5,98,0,0,145,26,1,0,0,0,146,147,5,119,0,0,
147,148,5,121,0,0,148,149,5,112,0,0,149,150,5,105,0,0,150,151,5,115,0,0,
151,152,5,122,0,0,152,28,1,0,0,0,153,154,5,43,0,0,154,30,1,0,0,0,155,156,
5,45,0,0,156,32,1,0,0,0,157,158,5,42,0,0,158,34,1,0,0,0,159,160,5,47,0,0,
160,36,1,0,0,0,161,162,5,110,0,0,162,163,5,112,0,0,163,38,1,0,0,0,164,165,
5,110,0,0,165,166,5,97,0,0,166,167,5,112,0,0,167,168,5,114,0,0,168,169,5,
122,0,0,169,170,5,111,0,0,170,171,5,100,0,0,171,40,1,0,0,0,172,173,5,119,
0,0,173,174,5,115,0,0,174,42,1,0,0,0,175,176,5,119,0,0,176,177,5,115,0,0,
177,178,5,116,0,0,178,179,5,101,0,0,179,180,5,99,0,0,180,181,5,122,0,0,181,
44,1,0,0,0,182,183,5,112,0,0,183,184,5,119,0,0,184,46,1,0,0,0,185,186,5,
112,0,0,186,187,5,114,0,0,187,188,5,97,0,0,188,189,5,119,0,0,189,190,5,111,
0,0,190,48,1,0,0,0,191,192,5,108,0,0,192,193,5,119,0,0,193,50,1,0,0,0,194,
195,5,108,0,0,195,196,5,101,0,0,196,197,5,119,0,0,197,198,5,111,0,0,198,
52,1,0,0,0,199,200,5,119,0,0,200,201,5,121,0,0,201,54,1,0,0,0,202,203,5,
119,0,0,203,204,5,121,0,0,204,205,5,99,0,0,205,206,5,122,0,0,206,207,5,121,
0,0,207,208,5,115,0,0,208,209,5,99,0,0,209,56,1,0,0,0,210,211,5,119,0,0,
211,212,5,121,0,0,212,213,5,99,0,0,213,214,5,122,0,0,214,215,5,121,0,0,215,
216,5,115,0,0,216,217,5,99,0,0,217,218,5,101,0,0,218,219,5,107,0,0,219,220,
5,114,0,0,220,221,5,97,0,0,221,222,5,110,0,0,222,58,1,0,0,0,223,224,5,112,
0,0,224,225,5,98,0,0,225,60,1,0,0,0,226,227,5,112,0,0,227,228,5,111,0,0,
228,229,5,100,0,0,229,230,5,110,0,0,230,231,5,105,0,0,231,232,5,101,0,0,
232,233,5,115,0,0,233,234,5,98,0,0,234,235,5,111,0,0,235,236,5,98,0,0,236,
237,5,114,0,0,237,238,5,97,0,0,238,62,1,0,0,0,239,240,5,111,0,0,240,241,
5,98,0,0,241,64,1,0,0,0,242,243,5,111,0,0,243,244,5,112,0,0,244,245,5,117,
0,0,245,246,5,115,0,0,246,247,5,99,0,0,247,248,5,98,0,0,248,249,5,111,0,
0,249,250,5,98,0,0,250,251,5,114,0,0,251,252,5,97,0,0,252,66,1,0,0,0,253,
254,5,115,0,0,254,255,5,98,0,0,255,68,1,0,0,0,256,257,5,115,0,0,257,258,
5,99,0,0,258,259,5,104,0,0,259,260,5,111,0,0,260,261,5,119,0,0,261,262,5,
97,0,0,262,263,5,106,0,0,263,264,5,98,0,0,264,265,5,111,0,0,265,266,5,98,
0,0,266,267,5,114,0,0,267,268,5,97,0,0,268,70,1,0,0,0,269,270,5,117,0,0,
270,271,5,98,0,0,271,72,1,0,0,0,272,273,5,117,0,0,273,274,5,107,0,0,274,
275,5,97,0,0,275,276,5,122,0,0,276,277,5,98,0,0,277,278,5,111,0,0,278,279,
5,98,0,0,279,280,5,114,0,0,280,281,5,97,0,0,281,74,1,0,0,0,282,283,5,100,
0,0,283,284,5,111,0,0,284,285,5,109,0,0,285,76,1,0,0,0,286,287,5,117,0,0,
287,288,5,98,0,0,288,289,5,111,0,0,289,290,5,112,0,0,290,78,1,0,0,0,291,
292,5,110,0,0,292,293,5,97,0,0,293,294,5,112,0,0,294,295,5,105,0,0,295,296,
5,115,0,0,296,80,1,0,0,0,297,298,5,117,0,0,298,299,5,115,0,0,299,300,5,116,
0,0,300,301,5,97,0,0,301,302,5,119,0,0,302,82,1,0,0,0,303,304,5,102,0,0,
304,305,5,111,0,0,305,306,5,114,0,0,306,84,1,0,0,0,307,308,5,107,0,0,308,
309,5,119,0,0,309,310,5,97,0,0,310,311,5,100,0,0,311,312,5,114,0,0,312,313,
5,97,0,0,313,314,5,116,0,0,314,86,1,0,0,0,315,316,5,34,0,0,316,317,3,89,
44,0,317,88,1,0,0,0,318,322,7,0,0,0,319,321,7,1,0,0,320,319,1,0,0,0,321,
324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,90,1,0,0,0,324,322,1,0,0,
0,325,327,7,2,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,328,329,
1,0,0,0,329,92,1,0,0,0,330,334,5,59,0,0,331,333,8,3,0,0,332,331,1,0,0,0,
333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,94,1,0,0,0,336,334,1,
0,0,0,337,339,5,13,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,
341,5,10,0,0,341,96,1,0,0,0,342,343,7,4,0,0,343,344,1,0,0,0,344,345,6,48,
0,0,345,98,1,0,0,0,5,0,322,328,334,338,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LogiXLexer extends antlr4.Lexer {

    static grammarFileName = "LogiX.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'to'", "'end'", "':'", "','", "'losowo'", 
                         "'powtorz'", "'['", "']'", "'jesli'", "'<'", "'>'", 
                         "'='", "'zrob'", "'wypisz'", "'+'", "'-'", "'*'", 
                         "'/'", "'np'", "'naprzod'", "'ws'", "'wstecz'", 
                         "'pw'", "'prawo'", "'lw'", "'lewo'", "'wy'", "'wyczysc'", 
                         "'wyczyscekran'", "'pb'", "'podniesbobra'", "'ob'", 
                         "'opuscbobra'", "'sb'", "'schowajbobra'", "'ub'", 
                         "'ukazbobra'", "'dom'", "'ubop'", "'napis'", "'ustaw'", 
                         "'for'", "'kwadrat'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, "LITERAL_WYRAZU", "LANCUCH", 
                          "CYFRA", "KOMENTARZ", "EOL", "BIALY_ZNAK" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", 
                      "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", 
                      "LITERAL_WYRAZU", "LANCUCH", "CYFRA", "KOMENTARZ", 
                      "EOL", "BIALY_ZNAK" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

LogiXLexer.EOF = antlr4.Token.EOF;
LogiXLexer.T__0 = 1;
LogiXLexer.T__1 = 2;
LogiXLexer.T__2 = 3;
LogiXLexer.T__3 = 4;
LogiXLexer.T__4 = 5;
LogiXLexer.T__5 = 6;
LogiXLexer.T__6 = 7;
LogiXLexer.T__7 = 8;
LogiXLexer.T__8 = 9;
LogiXLexer.T__9 = 10;
LogiXLexer.T__10 = 11;
LogiXLexer.T__11 = 12;
LogiXLexer.T__12 = 13;
LogiXLexer.T__13 = 14;
LogiXLexer.T__14 = 15;
LogiXLexer.T__15 = 16;
LogiXLexer.T__16 = 17;
LogiXLexer.T__17 = 18;
LogiXLexer.T__18 = 19;
LogiXLexer.T__19 = 20;
LogiXLexer.T__20 = 21;
LogiXLexer.T__21 = 22;
LogiXLexer.T__22 = 23;
LogiXLexer.T__23 = 24;
LogiXLexer.T__24 = 25;
LogiXLexer.T__25 = 26;
LogiXLexer.T__26 = 27;
LogiXLexer.T__27 = 28;
LogiXLexer.T__28 = 29;
LogiXLexer.T__29 = 30;
LogiXLexer.T__30 = 31;
LogiXLexer.T__31 = 32;
LogiXLexer.T__32 = 33;
LogiXLexer.T__33 = 34;
LogiXLexer.T__34 = 35;
LogiXLexer.T__35 = 36;
LogiXLexer.T__36 = 37;
LogiXLexer.T__37 = 38;
LogiXLexer.T__38 = 39;
LogiXLexer.T__39 = 40;
LogiXLexer.T__40 = 41;
LogiXLexer.T__41 = 42;
LogiXLexer.T__42 = 43;
LogiXLexer.LITERAL_WYRAZU = 44;
LogiXLexer.LANCUCH = 45;
LogiXLexer.CYFRA = 46;
LogiXLexer.KOMENTARZ = 47;
LogiXLexer.EOL = 48;
LogiXLexer.BIALY_ZNAK = 49;



